{"version":3,"sources":["store/index.ts","components/HomePage/HomePage.tsx","components/MoneyScore/MoneyScore.tsx","components/QuestionInfo/QuestionInfo.tsx","components/QuestionPage/QuestionsPage.tsx","components/TotalScore/TotalScore.tsx","App.tsx","index.tsx"],"names":["UPDATE_SCORE","actions","score","type","selectors","state","initialState","store","createStore","action","HomePage","className","to","MoneyScore","useSelector","money","map","sum","toLocaleString","letters","QuestionInfo","question","history","useHistory","useState","selected","setSelected","condition","setCondition","openMenu","setOpenMenu","dispatch","useDispatch","useEffect","classNames","QuestionInfo__menuClose","onClick","answers","item","index","QuestionInfo__selected","QuestionInfo__correct","corect","QuestionInfo__wrong","setTimeout","id","push","handleAnswer","answer","QuestionInfo__sidebarMenu","QuestionsPage","questionId","useParams","findQuestion","questions","find","el","TotalScore","App","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.895f2b4c.chunk.js","sourcesContent":["import { legacy_createStore as createStore, AnyAction } from 'redux';\n\nconst UPDATE_SCORE = 'UPDATE_SCORE';\n\nexport const actions = {\n  updateScore: (score: number) => ({\n    type: UPDATE_SCORE,\n    score,\n  }),\n};\n\nexport const selectors = {\n  getScore: (state: RootState) => state.score,\n};\n\ntype RootState = {\n  score: number;\n};\n\nconst initialState: RootState = {\n  score: 0,\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case UPDATE_SCORE:\n      return {\n        ...state,\n        score: action.score,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport '../../styles/Page.scss';\nimport { Link } from 'react-router-dom';\n\nexport const HomePage = () => (\n  <div className=\"Page\">\n    <div className=\"Page__image\">{}</div>\n    <div className=\"Page__wrapper\">\n      <h1 className=\"Page__title\">Who wants to be a millionaire?</h1>\n      <Link\n        className=\"Page__button\"\n        to=\"/questions/1\"\n      >\n        Start\n      </Link>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport money from '../../money.json';\nimport { selectors } from '../../store';\nimport './MoneyScore.scss';\n\nexport const MoneyScore = () => {\n  const score = useSelector(selectors.getScore);\n\n  return (\n    <ul className=\"MoneyScore\">\n      {money.map(sum => (\n        <li\n          key={sum}\n          className={score >= sum ? 'MoneyScore__sum inactive' : 'MoneyScore__sum'}\n        >\n          {`$${sum.toLocaleString()}`}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Question, Answer } from '../../types/Question';\nimport './QuestionInfo.scss';\nimport { MoneyScore } from '../MoneyScore/MoneyScore';\nimport { actions, selectors } from '../../store';\n\ntype Props = {\n  question: Question;\n};\n\nconst letters = ['A:', 'B:', 'C:', 'D:'];\n\nexport const QuestionInfo: React.FC<Props> = ({ question }) => {\n  const history = useHistory();\n  const [selected, setSelected] = useState<Answer | null>(null);\n  const [condition, setCondition] = useState<number>(1);\n  const [openMenu, setOpenMenu] = useState<boolean>(false);\n  const score = useSelector(selectors.getScore);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setSelected(null);\n    setCondition(1);\n  }, [question]);\n\n  const handleAnswer = (item: Answer) => {\n    setSelected(item);\n    setCondition(2);\n    setTimeout(() => setCondition(3), 1000);\n\n    setTimeout(() => {\n      if (question.id === 12) {\n        history.push('/total');\n        dispatch(actions.updateScore(score * 2));\n\n        return;\n      }\n\n      history.push(item.corect ? `/questions/${question.id + 1}` : '/total');\n    }, 2000);\n\n    if (!item.corect) {\n      return;\n    }\n\n    switch (score) {\n      case 0:\n        dispatch(actions.updateScore(500));\n        break;\n\n      case 64000:\n        dispatch(actions.updateScore(score * 2 - 3000));\n        break;\n\n      default:\n        dispatch(actions.updateScore(score * 2));\n    }\n  };\n\n  return (\n    <div className=\"QuestionInfo\">\n      <div className=\"QuestionInfo__main\">\n        <div className=\"QuestionInfo__menuWrapper\">\n          <button\n            className={classNames('QuestionInfo__menu', {\n              QuestionInfo__menuClose: openMenu,\n            })}\n            type=\"button\"\n            onClick={() => setOpenMenu(!openMenu)}\n          >\n          </button>\n        </div>\n        <h1 className=\"QuestionInfo__title\">{question.question}</h1>\n        <div className=\"QuestionInfo__buttonsWrapper\">\n          {question.answers.map((item, index) => {\n            return (\n              <button\n                type=\"button\"\n                className={classNames('QuestionInfo__button', {\n                  QuestionInfo__selected: item === selected && condition === 2,\n                  QuestionInfo__correct: item === selected && item.corect && condition === 3,\n                  QuestionInfo__wrong: item === selected && !item.corect && condition === 3,\n                })}\n                onClick={() => {\n                  handleAnswer(item);\n                }}\n                key={item.answer}\n              >\n                <span className=\"QuestionInfo__letter\">{letters[index]}</span>\n                {item.answer}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n      <div className={classNames('QuestionInfo__sidebar', {\n        QuestionInfo__sidebarMenu: openMenu,\n      })}\n      >\n        <div className=\"QuestionInfo__menuWrapper\">\n          <button\n            className={classNames('QuestionInfo__menu', {\n              QuestionInfo__menuClose: openMenu,\n            })}\n            type=\"button\"\n            onClick={() => setOpenMenu(!openMenu)}\n          >\n          </button>\n        </div>\n        <MoneyScore />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport questions from '../../questions.json';\nimport { QuestionInfo } from '../QuestionInfo/QuestionInfo';\n\nexport const QuestionsPage = () => {\n  const { questionId } = useParams<{questionId: string}>();\n  const findQuestion = questions.find(el => el.id === +questionId);\n\n  return (\n    <>\n      {findQuestion && <QuestionInfo question={findQuestion} />}\n    </>\n  );\n};\n","import React from 'react';\nimport '../../styles/Page.scss';\nimport './TotalScore.scss';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions, selectors } from '../../store';\n\nexport const TotalScore = () => {\n  const score = useSelector(selectors.getScore);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"TotalScore\">\n      <div className=\"Page__image\">{}</div>\n      <div className=\"Page__wrapper\">\n        <p className=\"TotalScore__header\">Total score:</p>\n        <h1 className=\"Page__title\">{`$${score.toLocaleString()} earned`}</h1>\n        <Link\n          className=\"Page__button\"\n          to=\"/\"\n          onClick={() => dispatch(actions.updateScore(0))}\n        >\n          Try again\n        </Link>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { HomePage } from './components/HomePage/HomePage';\nimport { QuestionsPage } from './components/QuestionPage/QuestionsPage';\nimport { TotalScore } from './components/TotalScore/TotalScore';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/\" exact>\n          <HomePage />\n        </Route>\n\n        <Route path=\"/questions/:questionId\">\n          <QuestionsPage />\n        </Route>\n\n        <Route path=\"/total\" exact>\n          <TotalScore />\n        </Route>\n\n        <p className=\"App__foundPage\">Not found page</p>\n      </Switch>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}